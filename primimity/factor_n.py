#!/usr/bin/python3

from Crypto.Util.number import getRandomNBitInteger, isPrime

def FindNthRoot(x,n):
    
    high = 1
    while high ** n <= x:
        high *= 2
    low = high//2
    while low < high:
        mid = (low + high) // 2
        if low < mid and mid**n < x:
            low = mid
        elif high > mid and mid**n > x:
            high = mid
        else:
            return mid
    return mid + 1

def FindNextPrime(n):
    if n <= 1:
        return 2
    elif n == 2:
        return 3
    else:
        if n % 2 == 0:
            n += 1
        else:
            n += 2
        while not isPrime(n):
            n += 2
        return n

n = 2739699434633097765008468371124644741923408864896396205946954196101304653772173210372608955799251139999322976228678445908704975780068946332615022064030241384638601426716056067126300711933438732265846838735860353259574129074615298010047322960704972157930663061480726566962254887144927753449042590678730779046154516549667611603792754880414526688217305247008627664864637891883902537649625488225238118503996674292057904635593729208703096877231276911845233833770015093213639131244386867600956112884383105437861665666273910566732634878464610789895607273567372933766243229798663389032807187003756226177111720510187664096691560511459141773632683383938152396711991246874813205614169161561906148974478519987935950318569760474249427787310865749167740917232799538099494710964837536211535351200520324575676987080484141561336505103872809932354748531675934527453231255132361489570816639925234935907741385330442961877410196615649696508210921

# Find the cube root of n, search prime numbers greater than this until the factor of n is found
p = FindNthRoot(n,3)

while n%p != 0:
    p = FindNextPrime(p)
print(p)

# Compute m, set q equal to p and search prime numbers greater than this until the factor of m is found
m = n // p
q = p

while m%q != 0:
    q = FindNextPrime(q)
print(q)

# The final factor is m divided by q
r = m // q
print(r)